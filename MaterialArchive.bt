struct SBufferTOCEntry {
    uint unk1;
    uint unk2;
};

struct CPermutation {
  uint64 unk1;
  uint64 unk2;
};

enum <char> EMaterialTechnique {
    kMT_None = 'x', /* offset 0x10 = 9, offset 0x20 = 0, offset 0x28 = 1, type = 0 */
    kMT_DepthOnly = 'z',/* offset 0x10 = 15, offset 0x20 = 0, offset 0x28 = 1, type 1  */
    kMT_DeferredGBuffer = 'g',/* offset 0x10 = 15, offset 0x20 = 0, offset 0x28 = 1, type 2  */
    kMT_DeferredInstance = 'i',/* offset 0x10 = 16, offset 0x20 = 0, offset 0x28 = 1, type 3  */
    kMT_ForwardRender = 'f', /* offset 0x10 = 13, offset 0x20 = 0, offset 0x28 = 1, type  4 */
    kMT_ParticleTechniqueSprite = 's', /* offset 0x10 = 23, offset 0x20 = 0, offset 0x28 = 1, type 5  */
    kMT_ParticleTechniqueSwoosh = 'w', /* offset 0x10 = 23, offset 0x20 = 0, offset 0x28 = 1, type 6 */
    kMT_ParticleTechniqueModel = 'm', /* offset 0x10 = 22, offset 0x20 = 0, offset 0x28 = 1, type 7  */
};

struct CShaderIdentifier {
    EMaterialTechnique matTechnique;
    CPermutation perm;
};

struct SShaderTOCEntry {
    CShaderIdentifier identifier;
    uint unk1;
    uint unk2;
};

struct SMaterialTOCEntry {
    GUID guid;
    uint unk1;
    uint nameLen;
    char name[nameLen];
    ushort unk2;
    uint shaderEntryCount;
    SShaderTOCEntry shaderEntries[shaderEntryCount];    
    SBufferTOCEntry bufferToc;
};

struct SShaderSource {
    uchar state;
    uint strLen;
    if (strLen)
        char str[strLen]; 
    uint dataLen;
    uchar data[dataLen];
};

struct CShaderDefines {
    struct Name {
        uint str1Len;
        char str1[str1Len];
    };

    uint namesCount;
    if (namesCount)
        Name names[namesCount] <optimize = false>;
    uint unk;
};

struct CShaderVariable {

};
struct SShaderImportDesc {
    CShaderIdentifier ident;
    uint64 shaderID;
    int vertexProgramIndex;
    int pixelProgramIndex;
    int geomProgramIndex;
    int computeProgramIndex;
    uint unk;
    CShaderDefines defines;
    uint dataSize;
    union {
        struct {
            uint variableCount;
            CShaderVariable variables[1];
        } meta;
        char data[dataSize];
    } data;
};


struct SExpression {
    uint unk1;
    uint unk2;
};


struct CBooleanExpressionEvaluator {
    uint expressionCount;
    SExpression expressions[expressionCount];
};

struct SSimpleFeatureInstanceInternalOptionRequirement {
    uint unk;
    CBooleanExpressionEvaluator evaluator;
};

struct SSimpleFeatureInstanceShaderBinding {
    CStringFixed name;
    CStringFixed binding;
};

struct SSimpleFeatureInstanceInternalOption {
    uint unk;
    CShaderDefines shaderDefines;
    uint bindingCount;
    if (bindingCount) {
        SSimpleFeatureInstanceShaderBinding binding[bindingCount] <optimize = false>;
    }
};

struct IFeatureInstance;
struct CFeatureSet {
    uint count;
    IFeatureInstance features[count] <optimize = false>;
    CBooleanExpressionEvaluator evaluator;
};

struct CSimpleFeatureInstance {
    FourCC unk1;
    uint fccCount;
    uint fccs[fccCount];
    uint boolExpresionEvalCount;
    CBooleanExpressionEvaluator evaluators[boolExpresionEvalCount] <optimize = false>;
    uint internalOptionCount;
    SSimpleFeatureInstanceInternalOption internalOption[internalOptionCount] <optimize = false>;
    uint unk;
    uint unkIntCount;
    Assert(unkIntCount <= 32);
    uint unkInts[unkIntCount];
    uint optionRequirementCount;
    if (optionRequirementCount)
        SSimpleFeatureInstanceInternalOptionRequirement optionRequirements[optionRequirementCount] <optimize = false>;
};

struct SCompositeFeatureInstanceInternalOptionRequirement {
    uint unk;
    CBooleanExpressionEvaluator eval;
};

struct SCompositeFeatureInstanceInternalOption {
    CStringFixed name;
    CPermutation perm;
    CShaderDefines defines;
};

struct SCompositeFeatureInstanceArgument {
    CStringFixed name;
    CBooleanExpressionEvaluator evaluator;
};

struct CCompositeFeatureInstance {
    CFeatureSet subSet;
    uint argumentCount1;
    if (argumentCount1) {
        SCompositeFeatureInstanceArgument arguments1[argumentCount1] <optimize = false>;
    }
   uint argumentCount2;
   if (argumentCount2) {
       SCompositeFeatureInstanceArgument arguments2[argumentCount2] <optimize = false>;
   }

   uint optionCount;
   SCompositeFeatureInstanceInternalOption optionRequirements1[optionCount] <optimize = false>;
    uint optionRequirementsCount;
   SCompositeFeatureInstanceInternalOptionRequirement optionRequirements2[optionRequirementsCount] <optimize = false>;
};

struct IFeatureInstance;
struct CExplicitCompositeFeatureInstance;
struct CExplicitCompositeFeatureInstance {
    CCompositeFeatureInstance base;
    IFeatureInstance sub;
};

struct IFeatureInstance {
    uint type;
    CStringFixed name;
    uint unk1;
    uint unk2;
    switch(type) {
        case 0:
            CSimpleFeatureInstance simple <optimize = false>;
        break;
        case 1:
            CCompositeFeatureInstance composite <optimize = false>;
        break;
        case 2:
            CExplicitCompositeFeatureInstance explicitComposite <optimize = false>;
        break;
    }
};


struct SMaterialImportDesc {
    GUID guid;
    uint unk1;
    uint nameLen;
    char name[nameLen];
    ushort unk2;
    uint shaderImportCount;
    SShaderImportDesc shaderImportDescs[shaderImportCount] <optimize = false>;
    uint dataSize;
    union {
        struct {
            uchar hasFeatureSet;
            if (hasFeatureSet) {
                CFeatureSet featureSet;
            }
        } meta;
        char data[dataSize];
    } data;
};

struct MaterialBackend {
    ChunkDescriptor chunk;
    local uint64 start <format=hex, hidden=true> = FTell();
    uint flags;
    uint tocSize;
    if (flags != 0) {
        uint bufferEntryCount;
        SBufferTOCEntry bufferEntries[bufferEntryCount];
        uint materialEntryCount;
        SMaterialTOCEntry materialEntries[materialEntryCount] <optimize = false>;
        uint shaderSourceCount;
        SShaderSource shaderSources[shaderSourceCount]  <optimize = false>;
        uint materialImportDescCount;
        SMaterialImportDesc materialImportDescs[materialImportDescCount] <optimize = false>;
    };
    break;
    

    if ((FTell() - start) != chunk.size) {
        char data[chunk.size - (FTell() - start)];
    }
};

struct MaterialArchive(uint64 size) {
    local uint64 start <format=hex, hidden=true> = FTell();
    while (FTell() < start + size) {
        MaterialBackend backend;
    }
};