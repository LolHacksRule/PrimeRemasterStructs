#ifndef _CGAMEAREARESOURCE
#define _CGAMEAREARESOURCE

#include "CDataEnumObject.bt"

struct ProductionWorkStages {
  ushort count;
  local int i<hidden = true>;
  for (i = 0; i < count; ++i) {
    struct {
      uint id<format = hex>;
      ushort size;
      switch (id) {
      case 0x8333A604:
        CDataEnumValue val;
        break;
      case 0xB9187C94:
        CDataEnumValue val;
        break;
      case 0xEC5D9069:
        CDataEnumValue val;
        break;
      case 0x113F9CE1:
        uint productionStage;
        break;
      case 0x5CA42B9D:
        CDataEnumValue val;
        break;
      case 0x7B68B3A0:
        CDataEnumValue val;
        break;
      }
    } Property;
  }
};

struct GameAreaHeader {
  ChunkDescriptor chunk;
  if (isDKCTF)
  {
    uint16 unk;
  }
  else
  {
    GUID id_a;
    ushort unk1;
    ushort unk2;
    bool unk3;
    GUID id_b;
    GUID id_c;
    GUID id_d;
    GUID id_e;
    GUID id_f;
    ProductionWorkStages workStages;
  }
};

struct ScriptPerformanceGroupResourceData {
  CStringFixed name;
  GUID unk2;
  uchar unk3;
  ushort count;
  if (count) {
    struct {
        GUID guid;
    } guids[count];
  }
};

struct PerformanceGroups {
  ChunkDescriptor chunk;
  ushort dataCount;
  ScriptPerformanceGroupResourceData data[dataCount] <optimize = false>;
};

struct GeneratedObjectMap {
  ChunkDescriptor chunk;
  ushort guidCount;
  if (guidCount) {
    struct {
      GUID guid1;
      GUID guid2;
    } guids[guidCount];
  }
};

struct Dock {
  GUID a;
  GUID b;
  GUID c;
  GUID d;
  ushort roomTypeA;
  ushort roomTypeB;
};

struct Docks {
  ChunkDescriptor chunk;
  ushort dockCount;
  if (dockCount) {
    Dock docks[dockCount];
  }
};

struct SAtlasLookup {
  uint unkA;
  uint unkB;
  uint unkC;
  uint unkD;
};

struct BakedLightning {
  ChunkDescriptor chunk;
  uint flags;
  if (flags & 1) {
    GUID guid1;
    uint guidCount;
    if (guidCount) {
      struct {
        GUID guid;
      } guids[guidCount];
    }
    uint lookupCount;
    if (lookupCount) {
      SAtlasLookup lookups[lookupCount];
    }
  }

  if ((flags >> 1) & 1) {
    GUID guid2;
  }
};

struct LoadUnit {
  FormDescriptor form;
  local int start<hidden = true> = FTell();
  ChunkDescriptor chunk;
  CStringFixed name;
  GUID id;
  if (isDKCTF)
  {
    uint16 unk;
  }
  else
  {
    GUID id2;
    ushort unk2;
    uint unk3;
    if (unk3)
      char unkData2[unk3];
      uint unk4;
    if (unk4)
      char unkData3[unk4];
  }
  ChunkDescriptor lresChunk;
  uint guidCount;
  if (guidCount) {
    struct {
      GUID guids;
    } resIds[guidCount];
  }
  ChunkDescriptor llyrChunk;
  uint guidCount2;
  if (guidCount2) {
    struct {
      GUID guids;
    } resIds2[guidCount2];
  }
};

struct StringPool {
    uint unk1;
    uint unk2;
    uint poolLen;
    if (poolLen) {
        char data[poolLen];
    }
};
struct STRP {
  ChunkDescriptor form;
  uint unk1;
  uint numStrings1;
  if (numStrings1) {
    struct {
        uint strLen;
        char str[strLen];
    } strings1;
  }
  StringPool pool;
};

struct ScriptData {
  FormDescriptor form;
  if (isDKCTF)
  {
    FormDescriptor form2;
  }
  ChunkDescriptor chunk;
  if (isDKCTF)
  {
    uint32 componentTypeHash;
    GUID componentGUID;
    CStringFixed componentNmae;
    uint16 connectionCount;
    if (connectionCount) {
      struct {
          GUID connection1;
          GUID connection2;
          GUID componentID;
          uint16 unk;
          bool unk2;
          bool unk3;
      } connections;
    }
    uint16 scriptLinkCount;
    if (scriptLinkCount) {
      struct {
          GUID linkID;
          GUID componentID;
          bool unk;
      } connections;
    }
  }
  else
  {
      uint propertiesCount;
      uint instanceDataCount;
      uint dataLen;
      char data[dataLen * 0x18];
      struct {
        ChunkDescriptor chunk;
        char data[chunk.size];
      } properties[propertiesCount] <optimize = false>;
    
      struct {
        ChunkDescriptor chunk;
        char data[chunk.size];
      } instanceData[instanceDataCount] <optimize = false>;
  }
};

struct LayerHeader {
  CStringFixed name;
  GUID id;
  if (isDKCTF)
  {
    uint16 unk;
    ushort count;
    struct {
        GUID guid;
    } guids[count+1];
    bool unk2;
  }
  else
  {
    int unk;
  }
};

struct Layer {
  FormDescriptor layers_form;
  if (!isDKCTF)
  {
    FormDescriptor form;
  }
  ChunkDescriptor header_chunk;
  LayerHeader header;
};

struct CGameAreaResource {
  FormDescriptor form;
  GameAreaHeader game_area_header;
  PerformanceGroups performance_groups;
  GeneratedObjectMap generated_object_map;
  if (!isDKCTF)
  {
    Docks docks;
    BakedLightning baked_lighting;
    ChunkDescriptor load_unit_chunk;
    short num_load_units;
    LoadUnit load_units[num_load_units]<optimize = false>;
    STRP strp;
    ScriptData script_data;
  }
  else
  {
    //while (FTell() != start + form.size) {
      LoadUnit load_unit[7]<optimize=false>;
    //}
  }
  Layer layer;
};

#endif // _CGAMEAREARESOURCE